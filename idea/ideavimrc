
let mapleader = ' '
"nmap <Space> <Leader>


" text objects"
set argtextobj
set textobj-entire
set textobj-indent

set easymotion
set sneak
set surround
set exchange

set commentary
set NERDTree

"minor fixes
set highlightedyank
set vim-paragraph-motion
set ReplaceWithRegister

set number
set ignorecase
set smartcase

map <C-w>r :action MoveEditorToOppositeTabGroup<CR>
map <C-w><C-r> :action MoveEditorToOppositeTabGroup<CR>
" nmap <leader>mr :action MarkNotificationsAsRead<CR>


map <leader>fs :action SaveAll<CR>

nmap [a :previous<CR>
nmap ]a :next<CR>
nmap [A :first<CR>
nmap ]A :last<CR>

nnoremap [q :action PreviousOccurence<CR>
nnoremap ]q :action NextOccurence<CR>
nnoremap [l :action GotoPreviousError<CR>
nnoremap ]l :action GotoNextError<CR>
nnoremap [t :action PreviousTab<CR>
nnoremap ]t :action NextTab<CR>
nnoremap [m :action MethodUp<cr>
nnoremap ]m :action MethodDown<cr>
nnoremap [c :action VcsShowPrevChangeMarker<cr>
nnoremap ]c :action VcsShowNextChangeMarker<cr>


" easy system clipboard copy/paste
noremap <space>y "*y
noremap <space>Y "*Y
noremap <space>p "*p
noremap <space>P "*P

map J :action EditorJoinLines<CR>

" Doom compatible
map <leader>wv :action MoveTabRight<CR>
map <leader>wq :action CloseActiveTab<CR>

" enlargen - actually toggles, but it'll do
map <leader>wo :action HideAllWindows<CR>
" winner-undo - should be the way to undo the enlargen, still toggles
map <leader>wu :action HideAllWindows<CR>

map <leader>cr :action RenameElement<CR>
" find definition
map <leader>cd :action GotoDeclaration<CR>
map <leader>clgd :action GotoDeclaration<CR>
map <leader>ct :action GotoTypeDeclaration<CR>
map <leader>clgt :action GotoTypeDeclaration<CR>
map <leader>ck :action QuickJavaDoc<CR>
map <leader>clgk :action QuickJavaDoc<CR>
map <leader>clGk :action QuickJavaDoc<CR>
map <leader>clGi :action QuickImplementations<CR>
" find references
map <leader>cD :action FindUsages<CR>
map <leader>clgD :action FindUsages<CR>
map <leader>ci :action GotoImplementation<CR>
map <leader>clgi :action GotoImplementation<CR>

map <leader>ca :action ShowIntentionActions<CR>
map <leader>co :action OptimizeImports<CR>
map <leader>mio :action OptimizeImports<CR>
map <leader>cf :action ReformatCode<CR>
map <leader>mf :action ReformatCode<CR>
" refactorings
map <leader>clr :action Refactorings.QuickListPopupAction<CR>
" List errors
map <leader>cx :action InspectCode<CR>

" git Blame
map <leader>gB :action Annotate<CR>

" no real match - looking for code outline.  This was mirrored from counsel in org mode
map <leader>c/ :action FileStructurePopup<CR>

map <leader>mtt :action Run<CR>
map <leader>mta :action RunClass<CR>
map <leader>mtT :action RunClass<CR>
map <leader>mtd :action Debug<CR>
map <leader>mtD :action DebugClass<CR>

map <leader>mtr :action Rerun<CR>

map <leader>mdbb :action ToggleLineBreakpoint<CR>

map <leader>mtc :action RunConfiguration<CR>
