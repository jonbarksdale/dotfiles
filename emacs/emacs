(require 'package)

(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)

(add-to-list 'auto-mode-alist '("\\.\\(org\\)$" . org-mode))

(setq package-enable-at-startup nil)
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(setq evil-want-keybinding nil)
(use-package evil
  :ensure t
  :config
  (setq
    evil-mode-line-format 'before
    evil-emacs-state-cursor  '("red" box)
    evil-normal-state-cursor '("gray" box)
    evil-visual-state-cursor '("gray" box)
    evil-insert-state-cursor '("gray" bar)
    evil-motion-state-cursor '("gray" box))
  (evil-ex-define-cmd "ls" 'ibuffer)
  (evil-mode 1)
  )
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
(use-package evil-matchit
  :ensure t)
(use-package evil-collection
  :ensure t)

;; Fix paste from clipboard in evil mode
;; ref - https://emacs.stackexchange.com/questions/14940/emacs-doesnt-paste-in-evils-visual-mode-with-every-os-clipboard/15054
(fset 'evil-visual-update-x-selection 'ignore)

(use-package org
  :ensure t
  :bind ("A-<tab>" . pcomplete)
  :config
  (setq org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 2))
        org-refile-use-outline-path 'file
        org-outline-path-complete-in-steps nil
        )
  )

(setq org-capture-templates
      '(
        ("i" "inbox")
        ("iw" "Work inbox" entry (file+headline "~/Dropbox/org/work.org" "Inbox")
         "* TODO %?\n %i")
        ("ip" "Personal inbox" entry (file+headline "~/Dropbox/org/personal.org" "Inbox")
         "* TODO %?\n %i")
        ("p" "project")
        ("pw" "Work project" entry (file+headline "~/Dropbox/org/work.org" "Active Projects")
         "* TODO %?\n %i")
        ("pp" "Personal project" entry (file+headline "~/Dropbox/org/personal.org" "Projects")
         "* TODO %?\n %i")
        ("b" "Book suggestion" entry (file+headline "~/Dropbox/org/personal.org" "Media")
         "* BACKLOG %^{title} :book:%^g" :immediate-finish t)
        ("g" "Game suggestion" entry (file+headline "~/Dropbox/org/personal.org" "Media")
         "* BACKLOG %^{title} :game:%^g" :immediate-finish t)
        )
      )

(use-package org-evil
  :ensure t)
(use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
        (lambda ()
          (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
  (evil-declare-key 'normal org-mode-map
    "t" 'org-todo ; mark a TODO item as done
    "$" 'org-end-of-line ; org specific eol behavor
    "^" 'org-beginning-of-line ; org specific eol behavor
    ))

(use-package deft
  :ensure t
  :commands deft)

(setq deft-directory "~/notes"
      deft-extensions '("org" "md" "markdown" "txt" "text")
      deft-use-filter-string-for-filename t
      deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase))
      deft-markdown-mode-title-level 1
      deft-org-mode-title-prefix t)

(use-package markdown-mode
  :ensure t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))


(use-package helm-config
  :ensure nil
  :init
  (custom-set-variables '(helm-command-prefix-key "C-c h"))
  :config
  (bind-keys :map helm-command-map
             ("o" . helm-occur)
             ("g" . helm-do-grep)
             ("y" . yas-insert-snippet)))
(use-package helm
  :ensure t
  :config
  (setq
   helm-split-window-in-side-p t
   helm-buffers-fuzzy-matching t
   helm-move-to-line-cycle-in-source t
   helm-ff-search-library-in-sexp t
   helm-ff-file-name-history-use-recentf t
   )
  (bind-keys ("C-x b" . helm-mini)
             ("M-x" . helm-M-x)
             ("M-y" . helm-show-kill-ring)
             ("C-x C-b" . helm-buffers-list)
             ("C-x C-f" . helm-find-files)
             ("C-h f" . helm-apropos)
             ("C-h r" . helm-info-emacs)
             ("C-h C-l" . helm-locate-library))
  (bind-keys :map isearch-mode-map
             ("C-o" . helm-occur-from-isearch)))
(use-package helm-mode
  :ensure nil
  :config
  (helm-mode 1))

(use-package helm-ag
  :ensure t)
(use-package helm-descbinds
  :ensure t)

(use-package helm-org
  :ensure t
  :after (helm org)
  :config
    (add-to-list 'helm-completing-read-handlers-alist '(org-capture . helm-org-completing-read-tags))
    (add-to-list 'helm-completing-read-handlers-alist '(org-set-tags . helm-org-completing-read-tags))
  )

(use-package magit
  :ensure t)
(use-package evil-magit
  :ensure t)
(use-package projectile
  :ensure t)

(use-package kotlin-mode
  :ensure t)

(use-package zenburn-theme
  :ensure t)
(load-theme 'zenburn t)

(setq plantuml-jar-path
      (expand-file-name "~/.emacs.d/plantuml/plantuml.jar"))

(use-package plantuml-mode
  :ensure t
  :config 
          (setq plantuml-jar-path plantuml-jar-path)
          (setq plantuml-default-exec-mode 'jar))

(setq org-plantuml-jar-path plantuml-jar-path)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((plantuml . t)))

(add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)

(use-package auto-package-update
  :ensure t
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))

(progn
  (unless (or (fboundp 'helm-mode) (fboundp 'ivy-mode))
    (ido-mode t)
    (setq ido-enable-flex-matching t)))

(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1))

(use-package yasnippet-snippets
  :ensure t
  :after yasnippet )

(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package langtool
  :ensure t
  :config
;;  (setq langtool-language-tool-jar "/usr/local/Cellar/languagetool/4.8/libexec/languagetool-commandline.jar")
  (setq langtool-bin "/usr/local/bin/languagetool"
        langtool-disabled-rules '("WHITESPACE_RULE"
                                  "ARROWS"
                                  "DASH_RULE"
                                  "COMMA_PARENTHESIS_WHITESPACE"
                                  "EN_QUOTES")))
(use-package csv-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\\.[Cc][Ss][Vv]\\'" . csv-mode)))

(use-package org-brain
  :ensure t
  :init
  (setq org-brain-path "~/brain")
  (with-eval-after-load 'evil
    (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
  :config 
    (setq org-id-track-globally t)
)

(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c b") 'org-switchb)

(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

;; Save last place I was in a file
;; https://www.emacswiki.org/emacs/SavePlace
(save-place-mode 1)

;; show matching parens
(show-paren-mode 1)

;; backup configuration
;; Default and per-save backups go here:
(setq backup-directory-alist '(("" . "~/.emacs.d/backup/per-save")))

(setq vc-make-backup-files t)

(setq version-control t ;; Use version numbers for backups.
    kept-new-versions 10 ;; Number of newest versions to keep.
    kept-old-versions 0 ;; Number of oldest versions to keep.
    delete-old-versions t ;; Don't ask to delete excess backup versions.
    backup-by-copying t) ;; Copy all files, don't rename them.

;; set the default font to victor on a mac
(when (eq system-type 'darwin)
  (set-face-attribute 'default nil :family "Victor Mono")
  (mac-auto-operator-composition-mode))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(apropos-do-all t)
 '(face-font-family-alternatives
   (quote
    (("Monospace" "Victor Mono" "courier" "fixed")
     ("Monospace Serif" "Victor Mono" "Courier 10 Pitch" "Consolas" "Courier Std" "FreeMono" "Nimbus Mono L" "courier" "fixed")
     ("courier" "CMU Typewriter Text" "fixed")
     ("Sans Serif" "helv" "helvetica" "arial" "fixed")
     ("helv" "helvetica" "arial" "fixed"))))
 '(fill-column 100)
 '(helm-command-prefix-key "C-c h")
 '(helm-completion-style (quote emacs))
 '(helm-mode t)
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(load-prefer-newer t)
 '(org-agenda-files
   (quote
    ("~/Dropbox/org/personal.org" "~/Dropbox/org/work.org")))
 '(org-log-done (quote time))
 '(org-log-into-drawer t)
 '(org-modules
   (quote
    (org-bbdb org-bibtex org-docview org-gnus org-habit org-info org-irc org-mhe org-rmail org-w3m)))
 '(package-selected-packages
   (quote
    (helm-org evil-magit helm-descbinds helm-ag helm-mode helm-config org-brain csv-mode rainbow-delimiters langtool plantuml-mode mmm-mode yasnippet-snippets ya-snippet evil-org-agenda markdown-mode deft evil-collection evil-org auto-package-update projectile org-evil evil-matchit evil-surround magit helm evil use-package)))
 '(require-final-newline t)
 '(safe-local-variable-values (quote ((truncate-lines . f))))
 '(save-interprogram-paste-before-kill t)
 '(visible-bell t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
