;; Bootstrap straight.el package manager
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

;; for monkey patching stuff
(use-package el-patch
  :straight (:host github
                   :repo "raxod502/el-patch"
                   :branch "develop"))
(eval-when-compile
  (require 'el-patch))

(setq evil-want-keybinding nil)
(use-package evil
  :straight t
  :config
  (setq
    evil-mode-line-format 'before
    evil-emacs-state-cursor  '("red" box)
    evil-normal-state-cursor '("gray" box)
    evil-visual-state-cursor '("gray" box)
    evil-insert-state-cursor '("gray" bar)
    evil-motion-state-cursor '("gray" box))
  (evil-ex-define-cmd "ls" 'ibuffer)
  (evil-mode 1)
  )
(use-package evil-surround
  :straight t
  :config
  (global-evil-surround-mode 1))
(use-package evil-matchit
  :straight t)
(use-package evil-collection
  :straight t)

;; Fix paste from clipboard in evil mode
;; ref - https://emacs.stackexchange.com/questions/14940/emacs-doesnt-paste-in-evils-visual-mode-with-every-os-clipboard/15054
(fset 'evil-visual-update-x-selection 'ignore)


;; org mode
(defun org+-buffer-name-to-title (&optional end)
  "Rename buffer to value of #+TITLE:.
If END is non-nil search for #+TITLE: at `point' and
delimit it to END.
Start an unlimited search at `point-min' otherwise."
  (interactive)
  (let ((beg (or (and end (point))
         (point-min))))
    (save-excursion
      (when end
    (goto-char end)
    (setq end (line-end-position)))
      (goto-char beg)
      (when (re-search-forward "^[[:space:]]*#\\+TITLE:[[:space:]]*\\(.*?\\)[[:space:]]*$" end t)
    (rename-buffer (match-string 1)))))
  nil)

(defun org+-buffer-name-to-title-config ()
  "Configure Org to rename buffer to value of #+TITLE:."
  (font-lock-add-keywords nil '(org+-buffer-name-to-title)))


(use-package org
  :straight t
  :straight org-plus-contrib
  :bind ("A-<tab>" . pcomplete)
  :hook
  (org-mode . auto-fill-mode)
  (org-mode . visual-line-mode)
  :config
  (setq org-agenda-files '("~/Dropbox/org/personal.org" "~/Dropbox/org/work.org" "~/Dropbox/org-roam")
        org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 2))
        org-refile-use-outline-path 'file
        org-outline-path-complete-in-steps nil)
  (add-hook 'org-mode-hook #'org+-buffer-name-to-title-config)
  ;; TODO: this requires a patch to allow it to work with newer versions of mac os
  (require 'org-mac-iCal)
  (add-to-list 'org-modules 'org-mac-iCal)
  (setq org-agenda-include-diary t)
  (add-hook 'org-agenda-cleanup-fancy-diary-hook
          (lambda ()
            (goto-char (point-min))
            (save-excursion
              (while (re-search-forward "^[a-z]" nil t)
                (goto-char (match-beginning 0))
                (insert "0:00-24:00 ")))
            (while (re-search-forward "^ [a-z]" nil t)
              (goto-char (match-beginning 0))
              (save-excursion

              (insert (match-string 0))))))
  )

(setq org-agenda-custom-commands
      '(
        ;; TODO: filter by work or home?
        ("n" "Next actions"
         ((agenda ""
                  ((org-agenda-overriding-header "Agenda:")
                   (org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")))
                   (org-agenda-span 'day)
                   ))
          (tags-todo "-someday-inactive-media-hobby-habit"
                     ((org-agenda-overriding-header "Next actions:")
                      (org-agenda-prefix-format '((tags . "%i %?:e%-2b")))
                      ;; should I also skip the inbox subtree?
                      (org-agenda-skip-function '(org-agenda-skip-entry-if
                                                  'timestamp))))))
        ("u" "Unscheduled/unfiled tasks"
         (
          (agenda ""
                  ((org-agenda-overriding-header "Week agenda")
                   (org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")))
                   (org-agenda-span 'week)
                   ))
          (tags-todo "-someday-inactive-media-hobby-habit-project"
                     ((org-agenda-overriding-header "Unscheduled/unfiled tasks:")
                      (org-agenda-prefix-format '((tags . " %i %?:e%-2b")))
                      (org-agenda-skip-function '(org-agenda-skip-entry-if
                                                  'timestamp))))
          ))
        ("h" "Home Agenda"
         (
          (agenda ""
                  ((org-agenda-overriding-header "Agenda")
                   (org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")))
                   ))
          (tags-todo "-someday-inactive-media-work"
                     ((org-agenda-overriding-header "Available")
                      (org-agenda-prefix-format '((tags . " %i %?:e%-2b")))
                      (org-agenda-skip-function '(org-agenda-skip-entry-if
                                                  'scheduled))))
          ))
        ))

(setq org-capture-templates
      '(
        ("i" "inbox" entry (file+headline "~/Dropbox/org-roam/inbox.org" "Inbox")
         "* TODO %?\n %i")
        ("b" "Book suggestion" entry (file+headline "~/Dropbox/org-roam/media.org" "Media")
         "* BACKLOG %^{title} :book:%^g" :immediate-finish t)
        ("g" "Game suggestion" entry (file+headline "~/Dropbox/org-roam/media.org" "Media")
         "* BACKLOG %^{title} :game:%^g" :immediate-finish t)
        ("t" "templates")
        ("tc" "Train COE BRIT" entry (file+headline "~/Dropbox/org/work.org" "Tech lead responsibilities")
"* TODO %t - COE BRIT - %^{name} [/]%?                                       :coebr:
   :PROPERTIES:
   :ORDERED:  t
   :END:
** TODO Assign ticket to self and follow COE
** TODO Sync call
** TODO First pass - full
** TODO Midway checkup
** TODO Final Pass
** TODO prepare notes for debrief
** TODO debrief call
** TODO submit feedback")
        ("tp" "Packing checklist" entry (file+headline "~/Dropbox/org/personal.org" "Projects")
"* TODO %^{departure}t Packing for trip to %^{place} [/]%?                                      :travel:
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :END:
** TODO [#A] Remove *sharp* things from backpack!
** Work stuff [/]
*** TODO [#A] Pack Badge!
*** TODO Keyboard?
*** TODO Mouse?
*** TODO Mac Power supply?
*** TODO HDMI cable and adapter?
*** TODO Bluetooth Headset?
** Clothing [/]
*** TODO Shirts
*** TODO Pants
*** TODO Belts
*** TODO Underwear
*** TODO Socks
*** TODO Pajamas?
*** TODO Hat?
*** TODO Shoes?
*** TODO Swimsuit?
*** TODO Coat/outerwear?
*** TODO Nice/formal attire?
** Toiletries [/]
*** TODO [#A] Toothbrush
*** TODO [#A] Toothpaste
*** TODO Floss
*** TODO Mouthwash
*** TODO Waterpik?
*** TODO Beard balm
*** TODO Beard comb/brush
*** TODO Razor?
*** TODO Shave Oil?
*** TODO Hair pomade
*** TODO [#A] Deodorant
*** TODO Moisturizer
*** TODO Body soap/wash
*** TODO Face wash
*** TODO Shampoo/conditioner?
*** TODO Vitamins
*** TODO Cologne
*** TODO Tweezers?
*** TODO Nail Clippers?
*** TODO Travel Cutlery
** Toys [/]
*** TODO Phone Charger
*** TODO Garmin Charger
*** TODO Headphones
*** TODO Fire TV
*** TODO Power strip/cube
*** TODO Travel Router
*** TODO Kindle
*** TODO Kindle charger
*** TODO Switch
*** TODO Switch Charger
*** TODO Switch Controller
*** TODO Power Brick
*** TODO Pens & Notebooks
*** TODO Tak?
*** TODO iPad
*** TODO iPad Charger
*** TODO Flashlight?
** Road trip [/]
*** TODO 5 hour
*** TODO Granola bars/road snacks
*** TODO Trash bag
*** TODO Extra water
*** TODO Blankets
** Special equipment/weather [/]
*** TODO Umbrella
*** TODO Snow gear?
*** TODO Hand warmers
*** TODO Monkii Bars
*** TODO Lacrosse ball/fitness roller
*** TODO Exercise bands
*** TODO Hand exercisers")
      ))


(use-package org-evil
  :straight t
  :after org
  )
(use-package evil-org
  :straight t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
        (lambda ()
          (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
  (evil-declare-key 'normal org-mode-map
    "t" 'org-todo ; mark a TODO item as done
    "$" 'org-end-of-line ; org specific eol behavor
    "^" 'org-beginning-of-line ; org specific eol behavor
    (kbd "RET") 'org-open-at-point
    ))

(use-package deft
  :after org
  :bind
  ("C-c n d" . deft)
  :straight t
  :commands deft
  :custom
  (deft-default-extension "org")
  (deft-recursive t)
  (deft-directory "~/Dropbox/org-roam")
  (deft-extensions '("org" "md" "markdown" "txt" "text"))
  ;; 100% stolen from https://github.com/jethrokuan/.emacs.d/blob/master/init.el
  :config/el-patch
  (defun deft-parse-title (file contents)
    "Parse the given FILE and CONTENTS and determine the title.
If `deft-use-filename-as-title' is nil, the title is taken to
be the first non-empty line of the FILE.  Else the base name of the FILE is
used as title."
    (el-patch-swap (if deft-use-filename-as-title
                       (deft-base-filename file)
                     (let ((begin (string-match "^.+$" contents)))
                       (if begin
                           (funcall deft-parse-title-function
                                    (substring contents begin (match-end 0))))))
                   (org-roam--get-title-or-slug file))))

;; (setq deft-use-filter-string-for-filename t
;;       deft-file-naming-rules
;;         '((noslash . "-")
;;           (nospace . "-")
;;           (case-fn . downcase))
;;       deft-markdown-mode-title-level 1
;;       deft-org-mode-title-prefix t)

(use-package org-journal
  :straight t
  :after org
  :bind
  ("C-c n j" . org-journal-new-entry)
  :custom
  (org-journal-file-type 'daily)
  ;; only works ok for daily files
;;  (org-journal-date-prefix "#+TITLE: ")
  
  (org-journal-file-format "%Y-%m-%d.org")
  (org-journal-dir "~/Dropbox/org-roam")
  (org-journal-date-format "%A, %d %B %Y")
  (org-journal-carryover-items "")
  :bind
  (:map org-journal-mode-map
        ("C-c C-/" . org-journal-search)
        ("C-c C-s" . org-schedule))
  )

(defun org-journal-file-header-func (time)
"Custom function to create journal header."
(concat
    (pcase org-journal-file-type
    (`daily (format-time-string "#+TITLE: Journal for %A, %d %B %Y\n#+STARTUP: showeverything" time))
    (`weekly (format-time-string "#+TITLE: Journal for week %W, %Y\n#+STARTUP: folded" time))
    (`monthly (format-time-string "#+TITLE: Journal for %B, %Y\n#+STARTUP: folded" time))
    (`yearly (format-time-string "#+TITLE: Journal for %Y\n#+STARTUP: folded" time)))))

(setq org-journal-file-header 'org-journal-file-header-func)

(use-package org-roam
  :straight t
  :after org
  :hook
  (after-init . org-roam-mode)
  :custom
  (org-roam-directory "~/Dropbox/org-roam")
  (org-roam-db-location "~/.emacs.d/org-roam.db")
  (org-roam-completion-system 'helm)
  :bind
  (:map org-roam-mode-map
        (("C-c n l" . org-roam)
         ("C-c n f" . org-roam-find-file)
         ("C-c n g" . org-roam-show-graph))
   :map org-mode-map
        (("C-c n i" . org-roam-insert))))

(use-package markdown-mode
  :straight t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

(use-package ox-gfm
  :straight t
  :after (org))

(use-package helm
  :straight t
  :init
  (custom-set-variables '(helm-command-prefix-key "C-c h"))
  :config

  (setq
   helm-split-window-in-side-p t
   helm-buffers-fuzzy-matching t
   helm-move-to-line-cycle-in-source t
   helm-ff-search-library-in-sexp t
   helm-ff-file-name-history-use-recentf t
   )
  (bind-keys ("C-x b" . helm-mini)
             ("M-x" . helm-M-x)
             ("M-y" . helm-show-kill-ring)
             ("C-x C-b" . helm-buffers-list)
             ("C-x C-f" . helm-find-files)
             ("C-h f" . helm-apropos)
             ("C-h r" . helm-info-emacs)
             ("C-h C-l" . helm-locate-library))
  (bind-keys :map isearch-mode-map
             ("C-o" . helm-occur-from-isearch))
  (require 'helm-config)
  (bind-keys :map helm-command-map
             ("o" . helm-occur)
             ("g" . helm-do-grep)
             ("y" . yas-insert-snippet))
  (helm-mode 1))

(use-package helm-ag
  :straight t)
(use-package helm-descbinds
  :straight t)

(use-package helm-org
  :straight t
  :after (helm org)
  )

(use-package magit
  :straight t
  :bind ("C-x g" . magit-status)
  :hook
  (git-commit-setup . git-commit-turn-on-flyspell)
  :config
  (setq git-commit-summary-max-length 50
        git-commit-fill-column 72)
  )

(use-package evil-magit
  :straight t)
(use-package projectile
  :straight t)

(use-package ace-window
  :straight t
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  :config
  (define-key evil-normal-state-map "-" 'ace-window)
  )

(use-package avy
  :straight t)

(use-package kotlin-mode
  :straight t)

(use-package typescript-mode
  :straight t)

(use-package zenburn-theme
  :straight t)
(load-theme 'zenburn t)

(setq plantuml-jar-path
      (expand-file-name "~/.emacs.d/plantuml/plantuml.jar"))

(use-package plantuml-mode
  :straight t
  :config
          (setq plantuml-jar-path plantuml-jar-path)
          (setq plantuml-default-exec-mode 'jar))

(setq org-plantuml-jar-path plantuml-jar-path)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((plantuml . t)))

(add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)

(use-package auto-package-update
  :straight t
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))

(progn
  (unless (or (fboundp 'helm-mode) (fboundp 'ivy-mode))
    (ido-mode t)
    (setq ido-enable-flex-matching t)))

(defun yas/org-very-safe-expand ()
  (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

(use-package yasnippet
  :straight t
  :hook
  (org-mode .
          (lambda ()
            (make-variable-buffer-local 'yas/trigger-key)
            (setq yas/trigger-key [tab])
            (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
            (define-key yas/keymap [tab] 'yas/next-field)))
  :config
  (setq yas-snippet-dirs
        (directory-files (expand-file-name "~/.emacs.d/snippets") t "^\\([^.]\\|\\.[^.]\\|\\.\\..\\)"))
  (yas-global-mode 1)
  )

(use-package yasnippet-snippets
  :straight t
  :after yasnippet )


(use-package rainbow-delimiters
  :straight t
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package langtool
  :straight t
  :config
;;  (setq langtool-language-tool-jar "/usr/local/Cellar/languagetool/4.8/libexec/languagetool-commandline.jar")
  (setq langtool-bin "/usr/local/bin/languagetool"
        langtool-disabled-rules '("WHITESPACE_RULE"
                                  "ARROWS"
                                  "DASH_RULE"
                                  "COMMA_PARENTHESIS_WHITESPACE"
                                  "EN_QUOTES")))

(use-package flyspell
  :straight t
  :custom
    (ispell-program-name "aspell") ; use aspell instead of ispell
    (ispell-extra-args '("--sug-mode=ultra"))
  :hook
  (text-mode . flyspell-mode))

(use-package csv-mode
  :straight t
  :init
  (add-to-list 'auto-mode-alist '("\\.[Cc][Ss][Vv]\\'" . csv-mode)))

;; pop up library
(use-package pos-tip
  :straight t)

;; Auto complete configuration

(defun company-mode/backend-with-yas (backend)
  (if (and (listp backend) (member 'company-yasnippet backend))
      backend
    (append (if (consp backend) backend (list backend))
            '(:with company-yasnippet))))

(use-package company
  :straight t
  :defer t ;; implicit through having a hook set

  :init
  (add-hook 'after-init-hook 'global-company-mode)

  :custom
  (company-idle-delay 0.5)
  (company-minimum-prefix-length 1)
  (company-selection-wrap-around t)
  ;; consider company-tng for using tab to complete.
;;  (company-tng-configure-default)

  :bind
  (:map company-active-map
        ("C-n" . company-select-next)
        ("C-p" . company-select-previous))

  :config
  (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
  )

(use-package company-quickhelp
  :straight t
  :after (company pos-tip)
  :config
  (company-quickhelp-mode))

(use-package company-statistics
  :straight t
  :after company
  :config
  (company-statistics-mode))

(use-package company-org-roam
  :straight (:host github :repo "jethrokuan/company-org-roam")
  :config
  (push 'company-org-roam company-backends))

(use-package which-key
  :straight t
  :config
  (which-key-mode +1))

(use-package beacon
  :straight t
  :config
  (beacon-mode +1))

(use-package org-brain
  :straight t
  :init
  (setq org-brain-path "~/brain")
  (with-eval-after-load 'evil
    (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
  :config
    (setq org-id-track-globally t)
)

(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c b") 'org-switchb)
(global-set-key (kbd "C-c v") 'org-brain-visualize)

(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

;; Save last place I was in a file
;; https://www.emacswiki.org/emacs/SavePlace
(save-place-mode 1)

;; show matching parens
(show-paren-mode 1)

;; mode line settings
(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)

;; backup configuration
;; Default and per-save backups go here:
(setq backup-directory-alist '(("" . "~/.emacs.d/backup/per-save")))

(setq vc-make-backup-files t)

(setq version-control t ;; Use version numbers for backups.
    kept-new-versions 10 ;; Number of newest versions to keep.
    kept-old-versions 0 ;; Number of oldest versions to keep.
    delete-old-versions t ;; Don't ask to delete excess backup versions.
    backup-by-copying t) ;; Copy all files, don't rename them.

;; set the default font to victor on a mac
(when (eq system-type 'darwin)
  (set-face-attribute 'default nil :family "Victor Mono")
  (mac-auto-operator-composition-mode))

;; set frame title
(setq frame-title-format
        '(buffer-file-name "%f"
        (dired-directory dired-directory "%b")))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(apropos-do-all t)
 '(face-font-family-alternatives
   (quote
    (("Monospace" "Victor Mono" "courier" "fixed")
     ("Monospace Serif" "Victor Mono" "Courier 10 Pitch" "Consolas" "Courier Std" "FreeMono" "Nimbus Mono L" "courier" "fixed")
     ("courier" "CMU Typewriter Text" "fixed")
     ("Sans Serif" "helv" "helvetica" "arial" "fixed")
     ("helv" "helvetica" "arial" "fixed"))))
 '(fill-column 100)
 '(helm-command-prefix-key "C-c h")
 '(helm-completion-style (quote emacs))
 '(helm-mode t)
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(load-prefer-newer t)
 '(org-log-done (quote time))
 '(org-log-into-drawer t)
 '(org-modules
   (quote
    (org-bbdb org-bibtex org-docview org-gnus org-habit org-info org-irc org-mhe org-rmail org-w3m)))
 '(package-selected-packages
   (quote
    (org-ac auto-complete org orgit beacon which-key helm-org evil-magit helm-descbinds helm-ag helm-mode helm-config org-brain csv-mode rainbow-delimiters langtool plantuml-mode mmm-mode yasnippet-snippets ya-snippet evil-org-agenda markdown-mode deft evil-collection evil-org auto-package-update projectile org-evil evil-matchit evil-surround magit helm evil use-package)))
 '(require-final-newline t)
 '(safe-local-variable-values (quote ((truncate-lines . f))))
 '(save-interprogram-paste-before-kill t)
 '(visible-bell t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
